[
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "Apartment",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeter",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeterData",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "Tariff",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "Apartment",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeter",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "CalculationResults",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "Apartment",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeter",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeterData",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "Tariff",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "Apartment",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeter",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeterData",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "Apartment",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeter",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeterData",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "Tariff",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "Apartment",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "Apartment",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeter",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeterData",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeter",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "Apartment",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeterData",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeter",
        "importPath": "infrastructure.models",
        "description": "infrastructure.models",
        "isExtraImport": true,
        "detail": "infrastructure.models",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "SpectacularSwaggerView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularAPIView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "TaskView",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "HouseViewSet",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "ApartmentViewSet",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "WaterMeterViewSet",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "WaterMeterDataViewSet",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "AsyncResult",
        "importPath": "celery.result",
        "description": "celery.result",
        "isExtraImport": true,
        "detail": "celery.result",
        "documentation": {}
    },
    {
        "label": "HTTP_200_OK",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_202_ACCEPTED",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "bills_calculation",
        "importPath": "api.tasks",
        "description": "api.tasks",
        "isExtraImport": true,
        "detail": "api.tasks",
        "documentation": {}
    },
    {
        "label": "HouseSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "ApartmentSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "WaterMeterSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "WaterMeterDataSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "factory",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "factory",
        "description": "factory",
        "detail": "factory",
        "documentation": {}
    },
    {
        "label": "fuzzy",
        "importPath": "factory",
        "description": "factory",
        "isExtraImport": true,
        "detail": "factory",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "HouseFactory",
        "importPath": "tests.fixtures.factories",
        "description": "tests.fixtures.factories",
        "isExtraImport": true,
        "detail": "tests.fixtures.factories",
        "documentation": {}
    },
    {
        "label": "TariffFactory",
        "importPath": "tests.fixtures.factories",
        "description": "tests.fixtures.factories",
        "isExtraImport": true,
        "detail": "tests.fixtures.factories",
        "documentation": {}
    },
    {
        "label": "ApartmentFactory",
        "importPath": "tests.fixtures.factories",
        "description": "tests.fixtures.factories",
        "isExtraImport": true,
        "detail": "tests.fixtures.factories",
        "documentation": {}
    },
    {
        "label": "WaterMeterFactory",
        "importPath": "tests.fixtures.factories",
        "description": "tests.fixtures.factories",
        "isExtraImport": true,
        "detail": "tests.fixtures.factories",
        "documentation": {}
    },
    {
        "label": "WaterMeterDataFactory",
        "importPath": "tests.fixtures.factories",
        "description": "tests.fixtures.factories",
        "isExtraImport": true,
        "detail": "tests.fixtures.factories",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "jkh_assistant.api.apps",
        "description": "jkh_assistant.api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'api'",
        "detail": "jkh_assistant.api.apps",
        "documentation": {}
    },
    {
        "label": "WaterMeterDataSerializer",
        "kind": 6,
        "importPath": "jkh_assistant.api.serializers",
        "description": "jkh_assistant.api.serializers",
        "peekOfCode": "class WaterMeterDataSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = WaterMeterData\n        fields = (\"id\", \"value\", \"date\")\nclass WaterMeterSerializer(serializers.ModelSerializer):\n    readings = WaterMeterDataSerializer(many=True, required=False)\n    class Meta:\n        model = WaterMeter\n        fields = (\n            \"id\",",
        "detail": "jkh_assistant.api.serializers",
        "documentation": {}
    },
    {
        "label": "WaterMeterSerializer",
        "kind": 6,
        "importPath": "jkh_assistant.api.serializers",
        "description": "jkh_assistant.api.serializers",
        "peekOfCode": "class WaterMeterSerializer(serializers.ModelSerializer):\n    readings = WaterMeterDataSerializer(many=True, required=False)\n    class Meta:\n        model = WaterMeter\n        fields = (\n            \"id\",\n            \"serial_number\",\n            \"readings\",\n        )\nclass ApartmentSerializer(serializers.ModelSerializer):",
        "detail": "jkh_assistant.api.serializers",
        "documentation": {}
    },
    {
        "label": "ApartmentSerializer",
        "kind": 6,
        "importPath": "jkh_assistant.api.serializers",
        "description": "jkh_assistant.api.serializers",
        "peekOfCode": "class ApartmentSerializer(serializers.ModelSerializer):\n    water_meters = WaterMeterSerializer(many=True, required=False)\n    class Meta:\n        model = Apartment\n        fields = (\n            \"id\",\n            \"number\",\n            \"area\",\n            \"water_meters\",\n        )",
        "detail": "jkh_assistant.api.serializers",
        "documentation": {}
    },
    {
        "label": "HouseSerializer",
        "kind": 6,
        "importPath": "jkh_assistant.api.serializers",
        "description": "jkh_assistant.api.serializers",
        "peekOfCode": "class HouseSerializer(serializers.ModelSerializer):\n    apartments = ApartmentSerializer(many=True, required=False)\n    class Meta:\n        model = House\n        fields = (\"id\", \"address\", \"name\", \"apartments\")",
        "detail": "jkh_assistant.api.serializers",
        "documentation": {}
    },
    {
        "label": "calculate_water_meters_values",
        "kind": 2,
        "importPath": "jkh_assistant.api.tasks",
        "description": "jkh_assistant.api.tasks",
        "peekOfCode": "def calculate_water_meters_values(apartment: Apartment, tariff: Tariff):\n    result = 0\n    for water_meter in WaterMeter.objects.filter(apartment=apartment.id):\n        if len(water_meter.readings.all()) >= 2:\n            water_meter_readings = water_meter.readings.all().order_by(\n                \"-date\"\n            )[:3]\n            print(water_meter_readings)\n            result += tariff.price_per_unit * (\n                water_meter_readings[0].value - water_meter_readings[1].value",
        "detail": "jkh_assistant.api.tasks",
        "documentation": {}
    },
    {
        "label": "bills_calculation",
        "kind": 2,
        "importPath": "jkh_assistant.api.tasks",
        "description": "jkh_assistant.api.tasks",
        "peekOfCode": "def bills_calculation():\n    # подсчет всех показателей счетчиков для каждого дома\n    rent_tariff = Tariff.objects.get(name=\"rent\")\n    meter_tariff = Tariff.objects.get(name=\"water_bill\")\n    result = []\n    for apartment in Apartment.objects.all():\n        rent = apartment.area * rent_tariff.price_per_unit\n        meter = calculate_water_meters_values(apartment, meter_tariff)\n        CalculationResults.objects.get_or_create(\n            apartment=apartment, result=rent, type=\"rent\"",
        "detail": "jkh_assistant.api.tasks",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "jkh_assistant.api.urls",
        "description": "jkh_assistant.api.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r\"tasks\", TaskView, basename=\"task\")\nrouter.register(\"houses\", HouseViewSet)\nrouter.register(\"apartments\", ApartmentViewSet)\nrouter.register(\"water-meters/data\", WaterMeterDataViewSet)\nrouter.register(\"water-meters\", WaterMeterViewSet)\nurlpatterns = [\n    path(\"schema/\", SpectacularAPIView.as_view(), name=\"schema\"),\n    path(\"schema/docs/\", SpectacularSwaggerView.as_view(url_name=\"schema\")),\n    path(\"api/v1/\", include(router.urls)),",
        "detail": "jkh_assistant.api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "jkh_assistant.api.urls",
        "description": "jkh_assistant.api.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"schema/\", SpectacularAPIView.as_view(), name=\"schema\"),\n    path(\"schema/docs/\", SpectacularSwaggerView.as_view(url_name=\"schema\")),\n    path(\"api/v1/\", include(router.urls)),\n]",
        "detail": "jkh_assistant.api.urls",
        "documentation": {}
    },
    {
        "label": "HouseViewSet",
        "kind": 6,
        "importPath": "jkh_assistant.api.views",
        "description": "jkh_assistant.api.views",
        "peekOfCode": "class HouseViewSet(ModelViewSet):\n    queryset = House.objects.all()\n    serializer_class = HouseSerializer\nclass ApartmentViewSet(ModelViewSet):\n    queryset = Apartment.objects.all()\n    serializer_class = ApartmentSerializer\n    def perform_create(self, serializer):\n        serializer.save(\n            house=House.objects.get(id=self.request.data.get(\"house\"))\n        )",
        "detail": "jkh_assistant.api.views",
        "documentation": {}
    },
    {
        "label": "ApartmentViewSet",
        "kind": 6,
        "importPath": "jkh_assistant.api.views",
        "description": "jkh_assistant.api.views",
        "peekOfCode": "class ApartmentViewSet(ModelViewSet):\n    queryset = Apartment.objects.all()\n    serializer_class = ApartmentSerializer\n    def perform_create(self, serializer):\n        serializer.save(\n            house=House.objects.get(id=self.request.data.get(\"house\"))\n        )\nclass WaterMeterViewSet(ModelViewSet):\n    queryset = WaterMeter.objects.all()\n    serializer_class = WaterMeterSerializer",
        "detail": "jkh_assistant.api.views",
        "documentation": {}
    },
    {
        "label": "WaterMeterViewSet",
        "kind": 6,
        "importPath": "jkh_assistant.api.views",
        "description": "jkh_assistant.api.views",
        "peekOfCode": "class WaterMeterViewSet(ModelViewSet):\n    queryset = WaterMeter.objects.all()\n    serializer_class = WaterMeterSerializer\n    def perform_create(self, serializer):\n        serializer.save(\n            apartment=Apartment.objects.get(\n                id=self.request.data.get(\"apartment\")\n            )\n        )\nclass WaterMeterDataViewSet(ModelViewSet):",
        "detail": "jkh_assistant.api.views",
        "documentation": {}
    },
    {
        "label": "WaterMeterDataViewSet",
        "kind": 6,
        "importPath": "jkh_assistant.api.views",
        "description": "jkh_assistant.api.views",
        "peekOfCode": "class WaterMeterDataViewSet(ModelViewSet):\n    queryset = WaterMeterData.objects.all()\n    serializer_class = WaterMeterDataSerializer\n    def perform_create(self, serializer):\n        serializer.save(\n            water_meter=WaterMeter.objects.get(\n                id=self.request.data.get(\"water_meter\")\n            )\n        )\nclass TaskView(ViewSet):",
        "detail": "jkh_assistant.api.views",
        "documentation": {}
    },
    {
        "label": "TaskView",
        "kind": 6,
        "importPath": "jkh_assistant.api.views",
        "description": "jkh_assistant.api.views",
        "peekOfCode": "class TaskView(ViewSet):\n    @action([\"post\"], detail=False)\n    def create_task(self, request, *args, **kwargs):\n        rent_task = bills_calculation.apply_async()\n        return Response(\n            {\"task_id\": rent_task.id}, status=HTTP_202_ACCEPTED\n        )\n    @action([\"get\"], detail=True)\n    def get_result(self, request, pk=None):\n        result = AsyncResult(pk)",
        "detail": "jkh_assistant.api.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "jkh_assistant.infrastructure.migrations.0001_initial",
        "description": "jkh_assistant.infrastructure.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='House',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('address', models.CharField(help_text='укажите адрес дома', max_length=255, verbose_name='Адрес:')),",
        "detail": "jkh_assistant.infrastructure.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "jkh_assistant.infrastructure.migrations.0002_rename_reading_date_watermeterdata_date_and_more",
        "description": "jkh_assistant.infrastructure.migrations.0002_rename_reading_date_watermeterdata_date_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('infrastructure', '0001_initial'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='watermeterdata',\n            old_name='reading_date',\n            new_name='date',\n        ),",
        "detail": "jkh_assistant.infrastructure.migrations.0002_rename_reading_date_watermeterdata_date_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "jkh_assistant.infrastructure.migrations.0003_alter_watermeterdata_date_calculationresults",
        "description": "jkh_assistant.infrastructure.migrations.0003_alter_watermeterdata_date_calculationresults",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('infrastructure', '0002_rename_reading_date_watermeterdata_date_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='watermeterdata',\n            name='date',\n            field=models.DateField(default=datetime.datetime(2024, 7, 16, 15, 50, 21, 957292), help_text='укажите дату снятия показания', verbose_name='Дата показания:'),\n        ),",
        "detail": "jkh_assistant.infrastructure.migrations.0003_alter_watermeterdata_date_calculationresults",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "jkh_assistant.infrastructure.migrations.0004_alter_calculationresults_date_and_more",
        "description": "jkh_assistant.infrastructure.migrations.0004_alter_calculationresults_date_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('infrastructure', '0003_alter_watermeterdata_date_calculationresults'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='calculationresults',\n            name='date',\n            field=models.DateField(auto_now_add=True),\n        ),",
        "detail": "jkh_assistant.infrastructure.migrations.0004_alter_calculationresults_date_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "jkh_assistant.infrastructure.migrations.0005_remove_calculationresults_water_meter",
        "description": "jkh_assistant.infrastructure.migrations.0005_remove_calculationresults_water_meter",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('infrastructure', '0004_alter_calculationresults_date_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='calculationresults',\n            name='water_meter',\n        ),\n    ]",
        "detail": "jkh_assistant.infrastructure.migrations.0005_remove_calculationresults_water_meter",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "jkh_assistant.infrastructure.migrations.0006_alter_house_name",
        "description": "jkh_assistant.infrastructure.migrations.0006_alter_house_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('infrastructure', '0005_remove_calculationresults_water_meter'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='house',\n            name='name',\n            field=models.CharField(help_text='укажите название дома', max_length=255, verbose_name='Название:'),\n        ),",
        "detail": "jkh_assistant.infrastructure.migrations.0006_alter_house_name",
        "documentation": {}
    },
    {
        "label": "InfrastructureConfig",
        "kind": 6,
        "importPath": "jkh_assistant.infrastructure.apps",
        "description": "jkh_assistant.infrastructure.apps",
        "peekOfCode": "class InfrastructureConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'infrastructure'",
        "detail": "jkh_assistant.infrastructure.apps",
        "documentation": {}
    },
    {
        "label": "House",
        "kind": 6,
        "importPath": "jkh_assistant.infrastructure.models",
        "description": "jkh_assistant.infrastructure.models",
        "peekOfCode": "class House(models.Model):\n    \"\"\"Модель Дома.\"\"\"\n    address = models.CharField(\n        max_length=settings.MAX_STR_LENGTH,\n        verbose_name=\"Адрес:\",\n        help_text=\"укажите адрес дома\",\n    )\n    name = models.CharField(\n        max_length=settings.MAX_STR_LENGTH,\n        verbose_name=\"Название:\",",
        "detail": "jkh_assistant.infrastructure.models",
        "documentation": {}
    },
    {
        "label": "Apartment",
        "kind": 6,
        "importPath": "jkh_assistant.infrastructure.models",
        "description": "jkh_assistant.infrastructure.models",
        "peekOfCode": "class Apartment(models.Model):\n    \"\"\"Модель квартир.\"\"\"\n    house = models.ForeignKey(\n        House,\n        related_name=\"apartments\",\n        on_delete=models.CASCADE,\n        verbose_name=\"Дом:\",\n        help_text=\"укажите дом, в котором находится квартира\",\n    )\n    number = models.PositiveSmallIntegerField(",
        "detail": "jkh_assistant.infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeter",
        "kind": 6,
        "importPath": "jkh_assistant.infrastructure.models",
        "description": "jkh_assistant.infrastructure.models",
        "peekOfCode": "class WaterMeter(models.Model):\n    \"\"\"Модель счетчиков.\"\"\"\n    apartment = models.ForeignKey(\n        Apartment,\n        related_name=\"water_meters\",\n        on_delete=models.CASCADE,\n        verbose_name=\"Квартира:\",\n        help_text=\"укажите квартиру, в которой установлен счетчик\",\n    )\n    serial_number = models.CharField(",
        "detail": "jkh_assistant.infrastructure.models",
        "documentation": {}
    },
    {
        "label": "WaterMeterData",
        "kind": 6,
        "importPath": "jkh_assistant.infrastructure.models",
        "description": "jkh_assistant.infrastructure.models",
        "peekOfCode": "class WaterMeterData(models.Model):\n    \"\"\"Модель данных для каждого счетчика.\"\"\"\n    water_meter = models.ForeignKey(\n        WaterMeter,\n        related_name=\"readings\",\n        on_delete=models.CASCADE,\n        verbose_name=\"Счетчик:\",\n        help_text=\"укажите счетчик, для которого вводятся показания\",\n    )\n    date = models.DateField(",
        "detail": "jkh_assistant.infrastructure.models",
        "documentation": {}
    },
    {
        "label": "Tariff",
        "kind": 6,
        "importPath": "jkh_assistant.infrastructure.models",
        "description": "jkh_assistant.infrastructure.models",
        "peekOfCode": "class Tariff(models.Model):\n    \"\"\"Модель тарифа.\"\"\"\n    name = models.CharField(\n        max_length=settings.MAX_STR_LENGTH,\n        verbose_name=\"Название:\",\n        help_text=\"укажите название тарифа\",\n    )\n    price_per_unit = models.PositiveSmallIntegerField(\n        verbose_name=\"Стоимость:\",\n        help_text=\"укажите стоимость в рублях за единицу ресурса\",",
        "detail": "jkh_assistant.infrastructure.models",
        "documentation": {}
    },
    {
        "label": "CalculationResults",
        "kind": 6,
        "importPath": "jkh_assistant.infrastructure.models",
        "description": "jkh_assistant.infrastructure.models",
        "peekOfCode": "class CalculationResults(models.Model):\n    type = models.CharField(\n        choices=settings.TYPE_RESULT, max_length=settings.MAX_STR_LENGTH\n    )\n    apartment = models.ForeignKey(\n        Apartment, on_delete=models.CASCADE, related_name=\"calculation_result\"\n    )\n    date = models.DateField(auto_now_add=True,)\n    result = models.PositiveIntegerField()\n    def __str__(self):",
        "detail": "jkh_assistant.infrastructure.models",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.asgi",
        "description": "jkh_assistant.jkh_assistant.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "jkh_assistant.jkh_assistant.asgi",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.celery",
        "description": "jkh_assistant.jkh_assistant.celery",
        "peekOfCode": "app = Celery(\"jkh_assistant\")\napp.config_from_object(\"django.conf:settings\", namespace=\"CELERY\")\napp.autodiscover_tasks()",
        "detail": "jkh_assistant.jkh_assistant.celery",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv('DEBUG') == 'True'\nALLOWED_HOSTS = os.getenv(\"ALLOWED_HOSTS\", \"*\").split(\",\")\nALLOWED_ORIGINS = []\ndomains = os.getenv(\"ALLOWED_ORIGINS\", \"127.0.0.1\").split(\",\")",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "SECRET_KEY = os.getenv(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv('DEBUG') == 'True'\nALLOWED_HOSTS = os.getenv(\"ALLOWED_HOSTS\", \"*\").split(\",\")\nALLOWED_ORIGINS = []\ndomains = os.getenv(\"ALLOWED_ORIGINS\", \"127.0.0.1\").split(\",\")\nfor i in domains:\n    ALLOWED_ORIGINS.append(f\"http://{i}\")\n    ALLOWED_ORIGINS.append(f\"https://{i}\")\nCSRF_TRUSTED_ORIGINS = ALLOWED_ORIGINS.copy()",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "DEBUG = os.getenv('DEBUG') == 'True'\nALLOWED_HOSTS = os.getenv(\"ALLOWED_HOSTS\", \"*\").split(\",\")\nALLOWED_ORIGINS = []\ndomains = os.getenv(\"ALLOWED_ORIGINS\", \"127.0.0.1\").split(\",\")\nfor i in domains:\n    ALLOWED_ORIGINS.append(f\"http://{i}\")\n    ALLOWED_ORIGINS.append(f\"https://{i}\")\nCSRF_TRUSTED_ORIGINS = ALLOWED_ORIGINS.copy()\nCORS_ALLOWED_ORIGINS = ALLOWED_ORIGINS\n# Application definition",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "ALLOWED_HOSTS = os.getenv(\"ALLOWED_HOSTS\", \"*\").split(\",\")\nALLOWED_ORIGINS = []\ndomains = os.getenv(\"ALLOWED_ORIGINS\", \"127.0.0.1\").split(\",\")\nfor i in domains:\n    ALLOWED_ORIGINS.append(f\"http://{i}\")\n    ALLOWED_ORIGINS.append(f\"https://{i}\")\nCSRF_TRUSTED_ORIGINS = ALLOWED_ORIGINS.copy()\nCORS_ALLOWED_ORIGINS = ALLOWED_ORIGINS\n# Application definition\nINSTALLED_APPS = [",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "ALLOWED_ORIGINS = []\ndomains = os.getenv(\"ALLOWED_ORIGINS\", \"127.0.0.1\").split(\",\")\nfor i in domains:\n    ALLOWED_ORIGINS.append(f\"http://{i}\")\n    ALLOWED_ORIGINS.append(f\"https://{i}\")\nCSRF_TRUSTED_ORIGINS = ALLOWED_ORIGINS.copy()\nCORS_ALLOWED_ORIGINS = ALLOWED_ORIGINS\n# Application definition\nINSTALLED_APPS = [\n    \"corsheaders\",",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "domains",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "domains = os.getenv(\"ALLOWED_ORIGINS\", \"127.0.0.1\").split(\",\")\nfor i in domains:\n    ALLOWED_ORIGINS.append(f\"http://{i}\")\n    ALLOWED_ORIGINS.append(f\"https://{i}\")\nCSRF_TRUSTED_ORIGINS = ALLOWED_ORIGINS.copy()\nCORS_ALLOWED_ORIGINS = ALLOWED_ORIGINS\n# Application definition\nINSTALLED_APPS = [\n    \"corsheaders\",\n    \"django.contrib.admin\",",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = ALLOWED_ORIGINS.copy()\nCORS_ALLOWED_ORIGINS = ALLOWED_ORIGINS\n# Application definition\nINSTALLED_APPS = [\n    \"corsheaders\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = ALLOWED_ORIGINS\n# Application definition\nINSTALLED_APPS = [\n    \"corsheaders\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"corsheaders\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"drf_spectacular\",\n    \"rest_framework\",",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\nROOT_URLCONF = \"jkh_assistant.urls\"",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "ROOT_URLCONF = \"jkh_assistant.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "WSGI_APPLICATION = \"jkh_assistant.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"POSTGRES_DB\", \"postgres\"),\n        \"USER\": os.environ.get(\"POSTGRES_USER\", \"postgres\"),\n        \"PASSWORD\": os.environ.get(\"POSTGRES_PASSWORD\", \"postgres\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"db\"),",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"POSTGRES_DB\", \"postgres\"),\n        \"USER\": os.environ.get(\"POSTGRES_USER\", \"postgres\"),\n        \"PASSWORD\": os.environ.get(\"POSTGRES_PASSWORD\", \"postgres\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"db\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"5432\"),\n    }\n}",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nREST_FRAMEWORK = {",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nREST_FRAMEWORK = {\n    \"DEFAULT_SCHEMA_CLASS\": \"drf_spectacular.openapi.AutoSchema\",",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nREST_FRAMEWORK = {\n    \"DEFAULT_SCHEMA_CLASS\": \"drf_spectacular.openapi.AutoSchema\",\n    \"DATE_FORMAT\": \"%d.%m.%Y\",",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nREST_FRAMEWORK = {\n    \"DEFAULT_SCHEMA_CLASS\": \"drf_spectacular.openapi.AutoSchema\",\n    \"DATE_FORMAT\": \"%d.%m.%Y\",\n    \"TIME_FORMAT\": \"%H:%M\",\n    \"DEFAULT_PAGINATION_CLASS\": \"rest_framework.pagination.LimitOffsetPagination\",\n    \"PAGE_SIZE\": 20,",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, \"static\")\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nREST_FRAMEWORK = {\n    \"DEFAULT_SCHEMA_CLASS\": \"drf_spectacular.openapi.AutoSchema\",\n    \"DATE_FORMAT\": \"%d.%m.%Y\",\n    \"TIME_FORMAT\": \"%H:%M\",\n    \"DEFAULT_PAGINATION_CLASS\": \"rest_framework.pagination.LimitOffsetPagination\",\n    \"PAGE_SIZE\": 20,\n    \"DEFAULT_FILTER_BACKENDS\": [",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nREST_FRAMEWORK = {\n    \"DEFAULT_SCHEMA_CLASS\": \"drf_spectacular.openapi.AutoSchema\",\n    \"DATE_FORMAT\": \"%d.%m.%Y\",\n    \"TIME_FORMAT\": \"%H:%M\",\n    \"DEFAULT_PAGINATION_CLASS\": \"rest_framework.pagination.LimitOffsetPagination\",\n    \"PAGE_SIZE\": 20,\n    \"DEFAULT_FILTER_BACKENDS\": [\n        \"django_filters.rest_framework.DjangoFilterBackend\"",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nREST_FRAMEWORK = {\n    \"DEFAULT_SCHEMA_CLASS\": \"drf_spectacular.openapi.AutoSchema\",\n    \"DATE_FORMAT\": \"%d.%m.%Y\",\n    \"TIME_FORMAT\": \"%H:%M\",\n    \"DEFAULT_PAGINATION_CLASS\": \"rest_framework.pagination.LimitOffsetPagination\",\n    \"PAGE_SIZE\": 20,\n    \"DEFAULT_FILTER_BACKENDS\": [\n        \"django_filters.rest_framework.DjangoFilterBackend\"\n    ],",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"DEFAULT_SCHEMA_CLASS\": \"drf_spectacular.openapi.AutoSchema\",\n    \"DATE_FORMAT\": \"%d.%m.%Y\",\n    \"TIME_FORMAT\": \"%H:%M\",\n    \"DEFAULT_PAGINATION_CLASS\": \"rest_framework.pagination.LimitOffsetPagination\",\n    \"PAGE_SIZE\": 20,\n    \"DEFAULT_FILTER_BACKENDS\": [\n        \"django_filters.rest_framework.DjangoFilterBackend\"\n    ],\n    \"DEFAULT_PERMISSION_CLASSES\": [\"rest_framework.permissions.AllowAny\"],",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "SPECTACULAR_SETTINGS",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "SPECTACULAR_SETTINGS = {\n    \"TITLE\": \"JKH_Assistant\",\n    \"DESCRIPTION\": \"...\",\n    \"VERSION\": \"1.0.0\",\n    \"SERVE_INCLUDE_SCHEMA\": False,\n    \"ENUM_NAME_OVERRIDES\": {\"status\": \"CustomStatusEnum\"},\n    \"ENUM_ADD_EXPLICIT_BLANK_NULL_CHOICE\": True,\n}\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://localhost:6379/0\")",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://localhost:6379/0\")\nCELERY_RESULT_BACKEND = os.environ.get(\n    \"CELERY_BROKER\", \"redis://localhost:6379/0\"\n)\nMAX_STR_LENGTH = 255\nTYPE_RESULT = (\n        ('rent', 'rent'),\n        ('water_meter', 'water_meter')\n    )",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "CELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://localhost:6379/0\")\nCELERY_RESULT_BACKEND = os.environ.get(\n    \"CELERY_BROKER\", \"redis://localhost:6379/0\"\n)\nMAX_STR_LENGTH = 255\nTYPE_RESULT = (\n        ('rent', 'rent'),\n        ('water_meter', 'water_meter')\n    )",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "CELERY_RESULT_BACKEND = os.environ.get(\n    \"CELERY_BROKER\", \"redis://localhost:6379/0\"\n)\nMAX_STR_LENGTH = 255\nTYPE_RESULT = (\n        ('rent', 'rent'),\n        ('water_meter', 'water_meter')\n    )",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "MAX_STR_LENGTH",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "MAX_STR_LENGTH = 255\nTYPE_RESULT = (\n        ('rent', 'rent'),\n        ('water_meter', 'water_meter')\n    )",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "TYPE_RESULT",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.settings",
        "description": "jkh_assistant.jkh_assistant.settings",
        "peekOfCode": "TYPE_RESULT = (\n        ('rent', 'rent'),\n        ('water_meter', 'water_meter')\n    )",
        "detail": "jkh_assistant.jkh_assistant.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.urls",
        "description": "jkh_assistant.jkh_assistant.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"api.urls\"))\n]\nif settings.DEBUG:\n    urlpatterns += static(\n        settings.STATIC_URL, document_root=settings.STATIC_ROOT\n    )\n    urlpatterns += static(\n        settings.MEDIA_URL, document_root=settings.MEDIA_ROOT",
        "detail": "jkh_assistant.jkh_assistant.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "jkh_assistant.jkh_assistant.wsgi",
        "description": "jkh_assistant.jkh_assistant.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "jkh_assistant.jkh_assistant.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "jkh_assistant.manage",
        "description": "jkh_assistant.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jkh_assistant.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "jkh_assistant.manage",
        "documentation": {}
    },
    {
        "label": "HouseFactory",
        "kind": 6,
        "importPath": "tests.fixtures.factories",
        "description": "tests.fixtures.factories",
        "peekOfCode": "class HouseFactory(factory.django.DjangoModelFactory):\n    class Meta:\n        model = House\n    address = factory.Faker(\"address\")\n    name = factory.Faker(\"name\")\nclass ApartmentFactory(factory.django.DjangoModelFactory):\n    class Meta:\n        model = Apartment\n    house = factory.SubFactory(HouseFactory)\n    number = factory.Sequence(lambda n: n + 1)",
        "detail": "tests.fixtures.factories",
        "documentation": {}
    },
    {
        "label": "ApartmentFactory",
        "kind": 6,
        "importPath": "tests.fixtures.factories",
        "description": "tests.fixtures.factories",
        "peekOfCode": "class ApartmentFactory(factory.django.DjangoModelFactory):\n    class Meta:\n        model = Apartment\n    house = factory.SubFactory(HouseFactory)\n    number = factory.Sequence(lambda n: n + 1)\n    area = factory.Faker(\"random_int\", min=30, max=200)\nclass WaterMeterFactory(factory.django.DjangoModelFactory):\n    class Meta:\n        model = WaterMeter\n    apartment = factory.SubFactory(ApartmentFactory)",
        "detail": "tests.fixtures.factories",
        "documentation": {}
    },
    {
        "label": "WaterMeterFactory",
        "kind": 6,
        "importPath": "tests.fixtures.factories",
        "description": "tests.fixtures.factories",
        "peekOfCode": "class WaterMeterFactory(factory.django.DjangoModelFactory):\n    class Meta:\n        model = WaterMeter\n    apartment = factory.SubFactory(ApartmentFactory)\n    serial_number = factory.Faker(\"ean13\")\nclass WaterMeterDataFactory(factory.django.DjangoModelFactory):\n    class Meta:\n        model = WaterMeterData\n    value = factory.LazyAttribute(\n        lambda o: WaterMeterDataFactory._generate_value()",
        "detail": "tests.fixtures.factories",
        "documentation": {}
    },
    {
        "label": "WaterMeterDataFactory",
        "kind": 6,
        "importPath": "tests.fixtures.factories",
        "description": "tests.fixtures.factories",
        "peekOfCode": "class WaterMeterDataFactory(factory.django.DjangoModelFactory):\n    class Meta:\n        model = WaterMeterData\n    value = factory.LazyAttribute(\n        lambda o: WaterMeterDataFactory._generate_value()\n    )\n    date = factory.LazyAttribute(\n        lambda o: WaterMeterDataFactory._generate_date()\n    )\n    water_meter = factory.SubFactory(WaterMeterFactory)",
        "detail": "tests.fixtures.factories",
        "documentation": {}
    },
    {
        "label": "TariffFactory",
        "kind": 6,
        "importPath": "tests.fixtures.factories",
        "description": "tests.fixtures.factories",
        "peekOfCode": "class TariffFactory(factory.django.DjangoModelFactory):\n    class Meta:\n        model = Tariff\n    name = factory.Faker(\"word\")\n    price_per_unit = factory.Faker(\"random_int\", min=1, max=100)",
        "detail": "tests.fixtures.factories",
        "documentation": {}
    },
    {
        "label": "house",
        "kind": 2,
        "importPath": "tests.fixtures.fixture_infrastructure",
        "description": "tests.fixtures.fixture_infrastructure",
        "peekOfCode": "def house():\n    return HouseFactory.create_batch(5)\n@pytest.fixture\ndef apartment(house):\n    return ApartmentFactory.create_batch(5)\n@pytest.fixture\ndef water_meter(apartment):\n    return WaterMeterFactory.create_batch(5)\n@pytest.fixture\ndef water_meter_data():",
        "detail": "tests.fixtures.fixture_infrastructure",
        "documentation": {}
    },
    {
        "label": "apartment",
        "kind": 2,
        "importPath": "tests.fixtures.fixture_infrastructure",
        "description": "tests.fixtures.fixture_infrastructure",
        "peekOfCode": "def apartment(house):\n    return ApartmentFactory.create_batch(5)\n@pytest.fixture\ndef water_meter(apartment):\n    return WaterMeterFactory.create_batch(5)\n@pytest.fixture\ndef water_meter_data():\n    return WaterMeterDataFactory.create_batch(5)\n@pytest.fixture\ndef tariff():",
        "detail": "tests.fixtures.fixture_infrastructure",
        "documentation": {}
    },
    {
        "label": "water_meter",
        "kind": 2,
        "importPath": "tests.fixtures.fixture_infrastructure",
        "description": "tests.fixtures.fixture_infrastructure",
        "peekOfCode": "def water_meter(apartment):\n    return WaterMeterFactory.create_batch(5)\n@pytest.fixture\ndef water_meter_data():\n    return WaterMeterDataFactory.create_batch(5)\n@pytest.fixture\ndef tariff():\n    return TariffFactory.create_batch(5)\n@pytest.fixture\ndef anonymous_user(client):",
        "detail": "tests.fixtures.fixture_infrastructure",
        "documentation": {}
    },
    {
        "label": "water_meter_data",
        "kind": 2,
        "importPath": "tests.fixtures.fixture_infrastructure",
        "description": "tests.fixtures.fixture_infrastructure",
        "peekOfCode": "def water_meter_data():\n    return WaterMeterDataFactory.create_batch(5)\n@pytest.fixture\ndef tariff():\n    return TariffFactory.create_batch(5)\n@pytest.fixture\ndef anonymous_user(client):\n    \"\"\"Фикстура для анонимного пользователя.\"\"\"\n    client.logout()\n    return client",
        "detail": "tests.fixtures.fixture_infrastructure",
        "documentation": {}
    },
    {
        "label": "tariff",
        "kind": 2,
        "importPath": "tests.fixtures.fixture_infrastructure",
        "description": "tests.fixtures.fixture_infrastructure",
        "peekOfCode": "def tariff():\n    return TariffFactory.create_batch(5)\n@pytest.fixture\ndef anonymous_user(client):\n    \"\"\"Фикстура для анонимного пользователя.\"\"\"\n    client.logout()\n    return client\n{\n    \"count\": 16,\n    \"next\": None,",
        "detail": "tests.fixtures.fixture_infrastructure",
        "documentation": {}
    },
    {
        "label": "anonymous_user",
        "kind": 2,
        "importPath": "tests.fixtures.fixture_infrastructure",
        "description": "tests.fixtures.fixture_infrastructure",
        "peekOfCode": "def anonymous_user(client):\n    \"\"\"Фикстура для анонимного пользователя.\"\"\"\n    client.logout()\n    return client\n{\n    \"count\": 16,\n    \"next\": None,\n    \"previous\": None,\n    \"results\": [\n        {",
        "detail": "tests.fixtures.fixture_infrastructure",
        "documentation": {}
    },
    {
        "label": "pytest_plugins",
        "kind": 5,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "pytest_plugins = [\n    'tests.fixtures.fixture_infrastructure',\n]",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "kind": 6,
        "importPath": "tests.test_apartment",
        "description": "tests.test_apartment",
        "peekOfCode": "class TestCase:\n    apartment_endpoint = \"/api/v1/apartments/\"\n    test_input_data_apartment = {\n        \"number\": 1,\n        \"area\": 64,\n    }\n    @pytest.mark.django_db(transaction=True)\n    def test_list_apartment(self, client, water_meter_data):\n        response = client.get(self.apartment_endpoint)\n        print(response.json())",
        "detail": "tests.test_apartment",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "kind": 6,
        "importPath": "tests.test_house",
        "description": "tests.test_house",
        "peekOfCode": "class TestCase:\n    house_endpoint = \"/api/v1/houses/\"\n    test_input_data_house = {\n        \"address\": \"2865 Molina Drive\\nBarneschester, PA 01472\",\n        \"name\": \"rather\"\n    }\n    @pytest.mark.django_db(transaction=True)\n    def test_list_house(self, water_meter_data, client):\n        response = client.get(self.house_endpoint)\n        # assert 2 == 1, str(response)",
        "detail": "tests.test_house",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "kind": 6,
        "importPath": "tests.test_water_meter",
        "description": "tests.test_water_meter",
        "peekOfCode": "class TestCase:\n    water_meter_endpoint = \"/api/v1/water-meters/\"\n    test_input_data_water_meter = {\n        \"serial_number\": \"874159d208111\",\n    }\n    @pytest.mark.django_db(transaction=True)\n    def test_list_water_meter(self, client, water_meter_data):\n        response = client.get(self.water_meter_endpoint)\n        print(response.json())\n        assert response.status_code == 200, (",
        "detail": "tests.test_water_meter",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "kind": 6,
        "importPath": "tests.test_water_meter_data",
        "description": "tests.test_water_meter_data",
        "peekOfCode": "class TestCase:\n    water_meter_data_endpoint = \"/api/v1/water-meters/data/\"\n    test_input_water_meter_data = {\"value\": 8722, \"date\": \"2002.03.10\"}\n    @pytest.mark.django_db(transaction=True)\n    def test_list_water_meter_data(self, client, water_meter_data):\n        response = client.get(self.water_meter_data_endpoint)\n        assert response.status_code == 200, (\n            f\"Проверьте, что при обращении к {self.water_meter_data_endpoint}\"\n            \" пользователь получает код 200\"\n        )",
        "detail": "tests.test_water_meter_data",
        "documentation": {}
    }
]